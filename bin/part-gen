#!/usr/bin/env python3

import os
import weaver.train
import weaver.utils.dataset
import torch

main_path = os.path.join(os.path.dirname(__file__), '..')

class Args:

    def __init__(self):
        self.network_config = os.path.join(main_path, 'src/python3/example_ParticleTransformer.py')
        self.network_option = { }
        self.export_onnx = True
        self.use_amp = False
        self.load_model_weights = None

args = Args()
data_config = os.path.join(main_path, 'config/JetClass_full.yaml')
data_config = weaver.utils.dataset.DataConfig.load(data_config, load_observers=False, load_reweight_info=False)
model, model_info, _ = weaver.train.model_setup(args, data_config)
# model.load_state_dict(torch.load(model_path, map_location='cpu'))  # XXX
model = model.cpu()
model.eval()

inputs = tuple(
    torch.ones(model_info['input_shapes'][k], dtype=torch.float32)
    for k in model_info['input_names']
)
input_names = model_info['input_names']
output_names = model_info['output_names']
dynamic_axes = model_info.get('dynamic_axes', None)
print('inputs:', [tuple(i.shape) for i in inputs])
print('inputs_names:', input_names)
print('outputs_names:', output_names)
print('dynamic_axes:', dynamic_axes)

torch.onnx.export(
    model, inputs, os.path.join(main_path, 'run/part.onnx'),
    input_names=input_names, output_names=output_names,
    dynamic_axes=dynamic_axes, opset_version=13
)
data_config.export_json(os.path.join(main_path, 'run/part-preprocess.json'))
